// bin/herodex.dart
import 'dart:io';

import 'package:uuid/uuid.dart';

import 'package:v04/env.dart';
import 'package:v04/managers/hero_data_manager.dart';
import 'package:v04/models/models.dart';             // barrel: alla modeller
import 'package:v04/services/superhero_api_service.dart';
import 'package:v04/ui/cli_utils.dart';              // f√§rger + print* helpers + label()
import 'package:v04/usecases/hero_usecases.dart';    // AlignmentFilter/SortOrder + logik

final _uuid = Uuid();

/// ====== Banner (f√§rger kommer fr√•n cli_utils.dart) ======
void printBanner() {
  print(cyan);
  print(r'''
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                                 ‚ïë
‚ïë    ‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó    ‚ïë
‚ïë    ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïù    ‚ïë
‚ïë    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó   ‚ïö‚ñà‚ñà‚ñà‚ïî‚ïù     ‚ïë
‚ïë    ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù   ‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó     ‚ïë
‚ïë    ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ïó    ‚ïë
‚ïë    ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù    ‚ïë
‚ïë                                                                 ‚ïë
‚ïë               ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó                ‚ïë
‚ïë                ‚ïö‚ïê‚ïê‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó               ‚ïë
‚ïë                ‚ñà‚ñà‚ñà‚ñà‚ïî‚ïê‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë               ‚ïë
‚ïë                 ‚ïö‚ïê‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë               ‚ïë
‚ïë               ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù               ‚ïë
‚ïë               ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù                ‚ïë
‚ïë                                                                 ‚ïë
‚ïë                  HeroDex 3000 ‚Äî Superhero CLI                   ‚ïë
‚ïë                                                                 ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
''');
  print(reset);
}

/// ====== Presentationshj√§lp (UI-lager) ======
int _strengthOf(HeroModel h) => h.powerstats?.strength ?? 0;

String _nameColor(HeroModel h) {
  final a = h.alignmentNormalized; // 'good' | 'bad' | 'neutral'
  if (a == 'bad') return red;
  if (a == 'good') return green;
  return cyan;
}

// Kort rad (f√∂r online-s√∂klistor)
String shortLine(HeroModel h) {
  final fullName = h.biography?.fullName ?? 'Ok√§nt';
  final gender   = h.appearance?.gender ?? 'Ok√§nt';
  final strength = _strengthOf(h);
  final color    = _nameColor(h);

  return "$color${h.name}$reset ($fullName) | "
         "${label('styrka')} $strength | "
         "${label('k√∂n')} $gender";
}

// Full rad (f√∂r lokala hj√§lte-listningar)
String heroLine(HeroModel h) {
  final fullName   = h.biography?.fullName ?? 'Ok√§nt';
  final gender     = h.appearance?.gender ?? 'Ok√§nt';
  final race       = h.appearance?.race ?? 'Ok√§nt';
  final alignment  = h.biography?.alignment ?? 'neutral';
  final special    = h.work?.occupation ?? 'ingen';
  final strength   = _strengthOf(h);
  final nameColor  = _nameColor(h);

  return "$nameColor${h.name}$reset ($fullName) | "
         "${label('styrka')} $strength | "
         "${label('k√∂n')} $gender | "
         "${label('ursprung')} $race | "
         "${label('alignment')} $alignment | "
         "${label('special')} $special";
}

/// ====== Inputhj√§lpare (CLI) ======
AlignmentFilter _askAlignmentFilter() {
  printInfo("\nV√§lj filter f√∂r visning:");
  print("1. Alla");
  print("2. Heroes (good)");
  print("3. Villains (bad/evil)");
  print("4. Neutral");
  stdout.write("Val (1‚Äì4, tomt = 1): ");
  switch ((stdin.readLineSync() ?? '').trim()) {
    case '2': return AlignmentFilter.heroes;
    case '3': return AlignmentFilter.villains;
    case '4': return AlignmentFilter.neutral;
    default:  return AlignmentFilter.all;
  }
}

SortOrder _askSortOrder() {
  printInfo("\nV√§lj sorteringsordning:");
  print("1. Efter styrka (standard)");
  print("2. Efter namn (A‚Äì√ñ)");
  print("3. Efter namn (√ñ‚ÄìA)");
  stdout.write("Val (1‚Äì3, tomt = 1): ");
  switch ((stdin.readLineSync() ?? '').trim()) {
    case '2': return SortOrder.nameAZ;
    case '3': return SortOrder.nameZA;
    default:  return SortOrder.strength;
  }
}

int _askIntInRange(String prompt, {required int min, required int max, required int fallback}) {
  while (true) {
    stdout.write("$prompt ($min‚Äì$max): ");
    final raw = stdin.readLineSync()?.trim() ?? '';
    final v = int.tryParse(raw);
    if (v != null && v >= min && v <= max) return v;
    if (raw.isEmpty) return fallback; // Enter ‚áí fallback inom intervallet
    printWarn("‚ö†Ô∏è  Ogiltigt v√§rde. Ange heltal $min‚Äì$max eller Enter f√∂r $fallback.");
  }
}

/// ====== Use cases / manager ======
final manager = HeroDataManager();
final useCases = HeroUseCases(manager);

Future<bool> _existsByNameOrId(String name, String id) {
  return useCases.existsByNameOrId(name, id);
}

/// ====== Kommandon ======
Future<void> addHero() async {
  stdout.write("Ange nytt hj√§ltenamn: ");
  final name = stdin.readLineSync()?.trim();
  if (name == null || name.isEmpty) return;

  final heroes = await manager.getHeroList();
  final exists = heroes.any((h) => h.name.toLowerCase() == name.toLowerCase());
  if (exists) {
    printWarn("‚ö†Ô∏è  Hj√§lten '$name' finns redan i databasen.");
    return;
  }

  final id = _uuid.v4();
  final str = _askIntInRange("Styrka", min: 0, max: 100, fallback: 50);
  stdout.write("K√∂n: ");
  final gender = stdin.readLineSync()?.trim() ?? 'Ok√§nt';
  stdout.write("Ursprung: ");
  final race = stdin.readLineSync()?.trim() ?? 'Ok√§nt';
  stdout.write("Alignment (good/neutral/bad): ");
  final align = stdin.readLineSync()?.trim().toLowerCase() ?? 'neutral';
  stdout.write("Specialitet: ");
  final occ = stdin.readLineSync()?.trim() ?? 'ingen';

  final newHero = HeroModel(
    id: id,
    name: name,
    powerstats: Powerstats(strength: str),
    appearance: Appearance(gender: gender, race: race),
    biography: Biography(alignment: align),
    work: Work(occupation: occ),
  );

  final saved = await useCases.addHero(newHero);
  if (saved) {
    printSuccess("‚úÖ Hj√§lten '$name' har lagts till!");
  } else {
    printWarn("‚ö†Ô∏è  Kunde inte spara (dubblett eller ogiltiga f√§lt).");
  }
}

Future<void> listHeroes() async {
  final all = await manager.getHeroList();
  if (all.isEmpty) {
    printWarn("Inga hj√§ltar sparade √§nnu.");
    return;
  }

  // 1) Fr√•ga efter filter + sort
  final filter = _askAlignmentFilter();
  final sortOrder = _askSortOrder();

  // 2) H√§mta listan via use case (logik utanf√∂r CLI)
  final sorted = await useCases.listHeroes(filter: filter, sortOrder: sortOrder);

  // 3) Titel
  final title = switch (filter) {
    AlignmentFilter.heroes   => "Hj√§ltar (good)",
    AlignmentFilter.villains => "Skurkar (bad)",
    AlignmentFilter.neutral  => "Neutrala",
    AlignmentFilter.all      => "Alla",
  };
  final sortLabel = switch (sortOrder) {
    SortOrder.nameAZ   => " (A‚Äì√ñ)",
    SortOrder.nameZA   => " (√ñ‚ÄìA)",
    SortOrder.strength => " (styrka)",
  };

  if (sorted.isEmpty) {
    printWarn("Inga poster matchade filtret.");
    return;
  }

  printInfo("\n=== $title$sortLabel ‚Äî ${sorted.length} st ===");
  for (final h in sorted) {
    print(heroLine(h));
  }
}

Future<void> deleteHero() async {
  final heroes = await manager.getHeroList();
  if (heroes.isEmpty) {
    printWarn("Det finns inga hj√§ltar att ta bort.");
    return;
  }

  for (var i = 0; i < heroes.length; i++) {
    print("${i + 1}. ${heroes[i].name}");
  }

  stdout.write("Ange numret p√• hj√§lten att ta bort (eller tomt f√∂r avbryt): ");
  final input = stdin.readLineSync()?.trim();
  if (input == null || input.isEmpty) {
    printWarn("Avbrutet.");
    return;
  }

  final idx = int.tryParse(input);
  if (idx == null || idx < 1 || idx > heroes.length) {
    printError("‚ùå Ogiltigt nummer.");
    return;
  }

  final hero = heroes[idx - 1];
  stdout.write("√Ñr du s√§ker p√• att du vill ta bort '${hero.name}'? (j/N): ");
  final confirm = stdin.readLineSync()?.trim().toLowerCase();
  if (confirm != 'j') {
    printWarn("Avbrutet.");
    return;
  }

  final ok = await useCases.deleteHeroById(hero.id);
  if (ok) {
    printSuccess("üóëÔ∏è  Hj√§lten '${hero.name}' borttagen.");
  } else {
    printError("‚ö†Ô∏è  N√•got gick fel vid borttagning.");
  }
}

Future<void> searchHeroesOnline() async {
  final token = Env.superheroToken;
  if (token == null || token.isEmpty || token == 'DIN_TOKEN_H√ÑR') {
    printWarn("üîí Ingen giltig SUPERHERO_TOKEN ‚Äî hoppar √∂ver onlines√∂kning.");
    return;
  }

  stdout.write("Ange s√∂kterm (namn): ");
  final query = stdin.readLineSync()?.trim() ?? '';
  if (query.isEmpty) {
    printWarn("Tom s√∂kterm.");
    return;
  }

  final api = SuperheroApiService(token);
  try {
    final results = await api.searchByName(query);
    if (results.isEmpty) {
      printWarn("‚ùå Inga online-tr√§ffar hittades.");
      return;
    }

    printInfo("\n=== Online-s√∂kresultat (SuperHero API) ===");
    for (var i = 0; i < results.length; i++) {
      final h = results[i];
      print("${i + 1}. ${shortLine(h)}");
    }

    stdout.write("Spara en av dessa? Ange nummer (tomt = nej): ");
    final choice = stdin.readLineSync()?.trim();
    if (choice == null || choice.isEmpty) return;

    final idx = int.tryParse(choice);
    if (idx == null || idx < 1 || idx > results.length) {
      printWarn("Ogiltigt nummer, sparar inget.");
      return;
    }

    final selected = results[idx - 1];
    if (await _existsByNameOrId(selected.name, selected.id)) {
      printWarn("‚ö†Ô∏è  '${selected.name}' finns redan (namn eller id).");
      return;
    }

    final saved = await manager.saveUnique(selected);
    if (saved) {
      printSuccess("‚úÖ '${selected.name}' sparad i lokal lista.");
    } else {
      printWarn("‚ö†Ô∏è  Kunde inte spara (dubblett/ogiltiga f√§lt).");
    }
  } finally {
    api.close();
  }
}

// ============================================================
// MAIN
// ============================================================

Future<void> main(List<String> args) async {
  Env.load();
  printBanner();

  var running = true;
  while (running) {
    printInfo("\n=== HeroDex 3000 ===");
    print("1. L√§gg till hj√§lte");
    print("2. Visa hj√§ltar");
    print("3. S√∂k online (SuperHero API)");
    print("4. Ta bort hj√§lte");
    print("5. Avsluta");
    stdout.write("V√§lj: ");

    switch (stdin.readLineSync()?.trim()) {
      case '1':
        await addHero();
        break;
      case '2':
        await listHeroes();
        break;
      case '3':
        await searchHeroesOnline();
        break;
      case '4':
        await deleteHero();
        break;
      case '5':
        printSuccess("üíæ Avslutar HeroDex 3000...");
        running = false;
        break;
      default:
        printWarn("‚ö†Ô∏è  Ogiltigt val, f√∂rs√∂k igen.");
    }
  }
}