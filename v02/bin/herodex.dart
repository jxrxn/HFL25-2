import 'dart:io';
import 'dart:convert';

/// Hj√§ltarna lagras h√§r
List<Map<String, dynamic>> heroes = [];

const saveFile = 'heroes.json';

void main() {
  loadHeroes(); // L√§s in tidigare sparade hj√§ltar

  bool running = true;

  while (running) {
    print("\n=== HeroDex 3000 ===");
    print("1. L√§gg till hj√§lte");
    print("2. Visa hj√§ltar");
    print("3. S√∂k hj√§lte");
    print("4. Ta bort hj√§lte");
    print("5. Avsluta (och spara)");
    stdout.write("V√§lj: ");

    final choice = stdin.readLineSync()?.trim();

    switch (choice) {
      case '1':
        addHero();
        saveHeroes();
        break;
      case '2':
        showHeroes();
        break;
      case '3':
        searchHeroes();
        break;
      case '4':
        deleteHero();
        break;
      case '5':
        saveHeroes();
        print("üíæ Avslutar HeroDex 3000...");
        running = false;
        break;
      default:
        print("‚ö†Ô∏è Ogiltigt val, f√∂rs√∂k igen.");
    }
  }
}

/// Hj√§lpfunktion: fr√•ga med m√∂jlighet till default (utan att skriva ut den)
String askString(String prompt, {required String defaultValue}) {
  stdout.write("$prompt: ");
  final v = stdin.readLineSync()?.trim();
  if (v == null || v.isEmpty) return defaultValue;
  return v;
}

/// Hj√§lpfunktion: fr√•ga efter styrka med gr√§ns 1‚Äì1000
int askStrength() {
  while (true) {
    stdout.write("Ange styrka (1‚Äì1000): ");
    final input = stdin.readLineSync()?.trim();
    final value = int.tryParse(input ?? '');
    if (value != null && value >= 1 && value <= 1000) return value;
    print("‚ö†Ô∏è Ogiltig styrka. Ange ett heltal mellan 1 och 1000.");
  }
}

/// L√§gg till en hj√§lte
void addHero() {
  final name = askString("Ange namn", defaultValue: "Ok√§nd");
  final strength = askStrength();
  final special = askString("Ange specialkraft", defaultValue: "ingen");
  final gender = askString("Ange k√∂n", defaultValue: "Unknown");
  final race   = askString("Ange ursprung", defaultValue: "Unknown");
  final align  = askString("Ange alignment (t.ex. sn√§ll/neutral/ond)", defaultValue: "neutral");

  final hero = {
    "name": name,
    "powerstats": {"strength": strength},
    "appearance": {"gender": gender, "race": race},
    "biography": {"alignment": align},
    "special": special,
  };

  heroes.add(hero);
  print("${hero["name"]} tillagd!");
}

/// Visa alla hj√§ltar sorterade efter styrka
void showHeroes() {
  if (heroes.isEmpty) {
    print("Inga hj√§ltar tillagda √§nnu.");
    return;
  }

  final sorted = [...heroes];
  sorted.sort((a, b) =>
      (b["powerstats"]["strength"] as int).compareTo(a["powerstats"]["strength"] as int));

  print("\n=== Hj√§ltar ===");
  for (final h in sorted) {
    final n = h["name"];
    final s = h["powerstats"]["strength"];
    final p = h["special"];
    final g = h["appearance"]["gender"];
    final r = h["appearance"]["race"];
    final a = h["biography"]["alignment"];
    print("- $n | styrka: $s | special: $p | gender: $g | origin: $r | alignment: $a");
  }
}

/// S√∂k efter hj√§lte
void searchHeroes() {
  if (heroes.isEmpty) {
    print("Inga hj√§ltar att s√∂ka i.");
    return;
  }

  stdout.write("Ange s√∂kterm (namn): ");
  final query = stdin.readLineSync()?.trim().toLowerCase() ?? '';
  if (query.isEmpty) {
    print("Tom s√∂kterm.");
    return;
  }

  final results = heroes.where(
    (h) => (h["name"] as String).toLowerCase().contains(query),
  );

  if (results.isEmpty) {
    print("Inga matchande hj√§ltar hittades.");
  } else {
    print("\n=== S√∂kresultat ===");
    for (final h in results) {
      final n = h["name"];
      final s = h["powerstats"]["strength"];
      final p = h["special"];
      final g = h["appearance"]["gender"];
      final r = h["appearance"]["race"];
      final a = h["biography"]["alignment"];
      print("- $n | styrka: $s | special: $p | gender: $g | origin: $r | alignment: $a");
    }
  }
}

/// Ta bort hj√§lte (via nummer i lista eller namn)
void deleteHero() {
  if (heroes.isEmpty) {
    print("Det finns inga hj√§ltar att ta bort.");
    return;
  }

  // Visa numrerad lista (sorterad starkast f√∂rst)
  final sorted = [...heroes];
  sorted.sort((a, b) =>
      (b["powerstats"]["strength"] as int).compareTo(a["powerstats"]["strength"] as int));

  print("\n=== Ta bort hj√§lte ===");
  for (var i = 0; i < sorted.length; i++) {
    final h = sorted[i];
    final n = h["name"];
    final s = h["powerstats"]["strength"];
    print("${i + 1}. $n (styrka: $s)");
  }
  stdout.write("Ange nummer att ta bort (eller skriv namn, eller l√§mna tomt f√∂r avbryt): ");
  final input = stdin.readLineSync()?.trim() ?? '';

  if (input.isEmpty) {
    print("Avbrutet.");
    return;
  }

  Map<String, dynamic>? toRemove;

  // F√∂rs√∂k tolka som index
  final idx = int.tryParse(input);
  if (idx != null && idx >= 1 && idx <= sorted.length) {
    toRemove = sorted[idx - 1];
  } else {
    // Matcha p√• namn (case-insensitivt, f√∂rsta tr√§ff)
    final lower = input.toLowerCase();
    toRemove = sorted.firstWhere(
      (h) => (h["name"] as String).toLowerCase() == lower,
      orElse: () => {},
    );
    if (toRemove.isEmpty) {
      print("Hittade ingen hj√§lte med det numret/namnet.");
      return;
    }
  }

  final name = toRemove["name"] as String;
  stdout.write("√Ñr du s√§ker p√• att du vill ta bort '$name'? (j/N): ");
  final confirm = stdin.readLineSync()?.trim().toLowerCase();
  if (confirm != 'j' && confirm != 'ja' && confirm != 'y' && confirm != 'yes') {
    print("Avbrutet.");
    return;
  }

  // Ta bort fr√•n original-listan (inte den sorterade kopian)
  final removed = heroes.remove(toRemove);
  if (removed) {
    saveHeroes();
    print("‚Äò$name‚Äô borttagen.");
  } else {
    print("Kunde inte ta bort ‚Äò$name‚Äô. (Ok√§nt fel.)");
  }
}

/// Spara hj√§ltar till fil (JSON)
void saveHeroes() {
  final file = File(saveFile);
  final jsonData = jsonEncode(heroes);
  file.writeAsStringSync(jsonData, mode: FileMode.write);
  // tyst i normalfall, men l√§mna kvar raden om du vill feedback:
  // print("üíæ Hj√§ltar sparade till $saveFile.");
}

/// L√§s in hj√§ltar fr√•n fil (JSON)
void loadHeroes() {
  final file = File(saveFile);
  if (file.existsSync()) {
    final contents = file.readAsStringSync();
    final List<dynamic> data = jsonDecode(contents);
    heroes = List<Map<String, dynamic>>.from(data);
    // print("üìÇ ${heroes.length} hj√§ltar laddades in fr√•n $saveFile");
  }
}